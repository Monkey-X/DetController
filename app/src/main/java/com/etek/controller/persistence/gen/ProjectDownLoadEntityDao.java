package com.etek.controller.persistence.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.etek.controller.dto.ProjectDownLoadEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECT_DOWN_LOAD_ENTITY".
*/
public class ProjectDownLoadEntityDao extends AbstractDao<ProjectDownLoadEntity, Long> {

    public static final String TABLENAME = "PROJECT_DOWN_LOAD_ENTITY";

    /**
     * Properties of entity ProjectDownLoadEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Xmbh = new Property(1, String.class, "xmbh", false, "XMBH");
        public final static Property Xmmc = new Property(2, String.class, "xmmc", false, "XMMC");
        public final static Property Dwdm = new Property(3, String.class, "dwdm", false, "DWDM");
        public final static Property Dwmc = new Property(4, String.class, "dwmc", false, "DWMC");
        public final static Property Htbh = new Property(5, String.class, "htbh", false, "HTBH");
        public final static Property Htmc = new Property(6, String.class, "htmc", false, "HTMC");
        public final static Property Result = new Property(7, int.class, "result", false, "RESULT");
        public final static Property Mmwj = new Property(8, String.class, "mmwj", false, "MMWJ");
        public final static Property FileSn = new Property(9, String.class, "fileSn", false, "FILE_SN");
    }


    public ProjectDownLoadEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectDownLoadEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECT_DOWN_LOAD_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"XMBH\" TEXT," + // 1: xmbh
                "\"XMMC\" TEXT," + // 2: xmmc
                "\"DWDM\" TEXT," + // 3: dwdm
                "\"DWMC\" TEXT," + // 4: dwmc
                "\"HTBH\" TEXT," + // 5: htbh
                "\"HTMC\" TEXT," + // 6: htmc
                "\"RESULT\" INTEGER NOT NULL ," + // 7: result
                "\"MMWJ\" TEXT," + // 8: mmwj
                "\"FILE_SN\" TEXT);"); // 9: fileSn
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECT_DOWN_LOAD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProjectDownLoadEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String xmbh = entity.getXmbh();
        if (xmbh != null) {
            stmt.bindString(2, xmbh);
        }
 
        String xmmc = entity.getXmmc();
        if (xmmc != null) {
            stmt.bindString(3, xmmc);
        }
 
        String dwdm = entity.getDwdm();
        if (dwdm != null) {
            stmt.bindString(4, dwdm);
        }
 
        String dwmc = entity.getDwmc();
        if (dwmc != null) {
            stmt.bindString(5, dwmc);
        }
 
        String htbh = entity.getHtbh();
        if (htbh != null) {
            stmt.bindString(6, htbh);
        }
 
        String htmc = entity.getHtmc();
        if (htmc != null) {
            stmt.bindString(7, htmc);
        }
        stmt.bindLong(8, entity.getResult());
 
        String mmwj = entity.getMmwj();
        if (mmwj != null) {
            stmt.bindString(9, mmwj);
        }
 
        String fileSn = entity.getFileSn();
        if (fileSn != null) {
            stmt.bindString(10, fileSn);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProjectDownLoadEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String xmbh = entity.getXmbh();
        if (xmbh != null) {
            stmt.bindString(2, xmbh);
        }
 
        String xmmc = entity.getXmmc();
        if (xmmc != null) {
            stmt.bindString(3, xmmc);
        }
 
        String dwdm = entity.getDwdm();
        if (dwdm != null) {
            stmt.bindString(4, dwdm);
        }
 
        String dwmc = entity.getDwmc();
        if (dwmc != null) {
            stmt.bindString(5, dwmc);
        }
 
        String htbh = entity.getHtbh();
        if (htbh != null) {
            stmt.bindString(6, htbh);
        }
 
        String htmc = entity.getHtmc();
        if (htmc != null) {
            stmt.bindString(7, htmc);
        }
        stmt.bindLong(8, entity.getResult());
 
        String mmwj = entity.getMmwj();
        if (mmwj != null) {
            stmt.bindString(9, mmwj);
        }
 
        String fileSn = entity.getFileSn();
        if (fileSn != null) {
            stmt.bindString(10, fileSn);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProjectDownLoadEntity readEntity(Cursor cursor, int offset) {
        ProjectDownLoadEntity entity = new ProjectDownLoadEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // xmbh
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // xmmc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dwdm
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dwmc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // htbh
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // htmc
            cursor.getInt(offset + 7), // result
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mmwj
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // fileSn
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProjectDownLoadEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setXmbh(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setXmmc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDwdm(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDwmc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHtbh(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHtmc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setResult(cursor.getInt(offset + 7));
        entity.setMmwj(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFileSn(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProjectDownLoadEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProjectDownLoadEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProjectDownLoadEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
