package com.etek.controller.persistence.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.etek.controller.persistence.entity.ForbiddenZoneEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FORBIDDEN_ZONE_ENTITY".
*/
public class ForbiddenZoneEntityDao extends AbstractDao<ForbiddenZoneEntity, Void> {

    public static final String TABLENAME = "FORBIDDEN_ZONE_ENTITY";

    /**
     * Properties of entity ForbiddenZoneEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ProjectInfoId = new Property(0, long.class, "projectInfoId", false, "PROJECT_INFO_ID");
        public final static Property Radius = new Property(1, int.class, "radius", false, "RADIUS");
        public final static Property Longitude = new Property(2, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(3, double.class, "latitude", false, "LATITUDE");
        public final static Property StartTime = new Property(4, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property StopTime = new Property(5, java.util.Date.class, "stopTime", false, "STOP_TIME");
    }

    private Query<ForbiddenZoneEntity> projectInfoEntity_ForbiddenZoneListQuery;

    public ForbiddenZoneEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ForbiddenZoneEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FORBIDDEN_ZONE_ENTITY\" (" + //
                "\"PROJECT_INFO_ID\" INTEGER NOT NULL ," + // 0: projectInfoId
                "\"RADIUS\" INTEGER NOT NULL ," + // 1: radius
                "\"LONGITUDE\" REAL NOT NULL ," + // 2: longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 3: latitude
                "\"START_TIME\" INTEGER," + // 4: startTime
                "\"STOP_TIME\" INTEGER);"); // 5: stopTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FORBIDDEN_ZONE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ForbiddenZoneEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getProjectInfoId());
        stmt.bindLong(2, entity.getRadius());
        stmt.bindDouble(3, entity.getLongitude());
        stmt.bindDouble(4, entity.getLatitude());
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(5, startTime.getTime());
        }
 
        java.util.Date stopTime = entity.getStopTime();
        if (stopTime != null) {
            stmt.bindLong(6, stopTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ForbiddenZoneEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getProjectInfoId());
        stmt.bindLong(2, entity.getRadius());
        stmt.bindDouble(3, entity.getLongitude());
        stmt.bindDouble(4, entity.getLatitude());
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(5, startTime.getTime());
        }
 
        java.util.Date stopTime = entity.getStopTime();
        if (stopTime != null) {
            stmt.bindLong(6, stopTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ForbiddenZoneEntity readEntity(Cursor cursor, int offset) {
        ForbiddenZoneEntity entity = new ForbiddenZoneEntity( //
            cursor.getLong(offset + 0), // projectInfoId
            cursor.getInt(offset + 1), // radius
            cursor.getDouble(offset + 2), // longitude
            cursor.getDouble(offset + 3), // latitude
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // startTime
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // stopTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ForbiddenZoneEntity entity, int offset) {
        entity.setProjectInfoId(cursor.getLong(offset + 0));
        entity.setRadius(cursor.getInt(offset + 1));
        entity.setLongitude(cursor.getDouble(offset + 2));
        entity.setLatitude(cursor.getDouble(offset + 3));
        entity.setStartTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setStopTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ForbiddenZoneEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ForbiddenZoneEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(ForbiddenZoneEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "forbiddenZoneList" to-many relationship of ProjectInfoEntity. */
    public List<ForbiddenZoneEntity> _queryProjectInfoEntity_ForbiddenZoneList(long projectInfoId) {
        synchronized (this) {
            if (projectInfoEntity_ForbiddenZoneListQuery == null) {
                QueryBuilder<ForbiddenZoneEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProjectInfoId.eq(null));
                projectInfoEntity_ForbiddenZoneListQuery = queryBuilder.build();
            }
        }
        Query<ForbiddenZoneEntity> query = projectInfoEntity_ForbiddenZoneListQuery.forCurrentThread();
        query.setParameter(0, projectInfoId);
        return query.list();
    }

}
