package com.etek.controller.persistence.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.etek.controller.persistence.entity.SingleCheckEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SINGLE_CHECK_ENTITY".
*/
public class SingleCheckEntityDao extends AbstractDao<SingleCheckEntity, Long> {

    public static final String TABLENAME = "SINGLE_CHECK_ENTITY";

    /**
     * Properties of entity SingleCheckEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property Relay = new Property(2, String.class, "relay", false, "RELAY");
        public final static Property DetId = new Property(3, int.class, "detId", false, "DET_ID");
        public final static Property DC = new Property(4, String.class, "DC", false, "DC");
        public final static Property TestStatus = new Property(5, int.class, "testStatus", false, "TEST_STATUS");
        public final static Property ProjectInfoId = new Property(6, long.class, "projectInfoId", false, "PROJECT_INFO_ID");
        public final static Property Batch = new Property(7, int.class, "batch", false, "BATCH");
        public final static Property Date = new Property(8, String.class, "date", false, "DATE");
    }


    public SingleCheckEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SingleCheckEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SINGLE_CHECK_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UID\" TEXT," + // 1: uid
                "\"RELAY\" TEXT," + // 2: relay
                "\"DET_ID\" INTEGER NOT NULL ," + // 3: detId
                "\"DC\" TEXT," + // 4: DC
                "\"TEST_STATUS\" INTEGER NOT NULL ," + // 5: testStatus
                "\"PROJECT_INFO_ID\" INTEGER NOT NULL ," + // 6: projectInfoId
                "\"BATCH\" INTEGER NOT NULL ," + // 7: batch
                "\"DATE\" TEXT);"); // 8: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SINGLE_CHECK_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SingleCheckEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
 
        String relay = entity.getRelay();
        if (relay != null) {
            stmt.bindString(3, relay);
        }
        stmt.bindLong(4, entity.getDetId());
 
        String DC = entity.getDC();
        if (DC != null) {
            stmt.bindString(5, DC);
        }
        stmt.bindLong(6, entity.getTestStatus());
        stmt.bindLong(7, entity.getProjectInfoId());
        stmt.bindLong(8, entity.getBatch());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SingleCheckEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
 
        String relay = entity.getRelay();
        if (relay != null) {
            stmt.bindString(3, relay);
        }
        stmt.bindLong(4, entity.getDetId());
 
        String DC = entity.getDC();
        if (DC != null) {
            stmt.bindString(5, DC);
        }
        stmt.bindLong(6, entity.getTestStatus());
        stmt.bindLong(7, entity.getProjectInfoId());
        stmt.bindLong(8, entity.getBatch());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SingleCheckEntity readEntity(Cursor cursor, int offset) {
        SingleCheckEntity entity = new SingleCheckEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // relay
            cursor.getInt(offset + 3), // detId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DC
            cursor.getInt(offset + 5), // testStatus
            cursor.getLong(offset + 6), // projectInfoId
            cursor.getInt(offset + 7), // batch
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SingleCheckEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRelay(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDetId(cursor.getInt(offset + 3));
        entity.setDC(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTestStatus(cursor.getInt(offset + 5));
        entity.setProjectInfoId(cursor.getLong(offset + 6));
        entity.setBatch(cursor.getInt(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SingleCheckEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SingleCheckEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SingleCheckEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
