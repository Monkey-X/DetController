package com.etek.controller.persistence.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.etek.controller.persistence.entity.ChkDetonatorEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHK_DETONATOR_ENTITY".
*/
public class ChkDetonatorEntityDao extends AbstractDao<ChkDetonatorEntity, Void> {

    public static final String TABLENAME = "CHK_DETONATOR_ENTITY";

    /**
     * Properties of entity ChkDetonatorEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ValidTime = new Property(0, java.util.Date.class, "validTime", false, "VALID_TIME");
        public final static Property Num = new Property(1, int.class, "num", false, "NUM");
        public final static Property ChipID = new Property(2, String.class, "chipID", false, "CHIP_ID");
        public final static Property DetIDs = new Property(3, String.class, "detIDs", false, "DET_IDS");
        public final static Property Source = new Property(4, String.class, "source", false, "SOURCE");
        public final static Property ExtId = new Property(5, String.class, "extId", false, "EXT_ID");
        public final static Property Type = new Property(6, int.class, "type", false, "TYPE");
        public final static Property Uid = new Property(7, String.class, "uid", false, "UID");
        public final static Property Code = new Property(8, String.class, "code", false, "CODE");
        public final static Property WorkCode = new Property(9, String.class, "workCode", false, "WORK_CODE");
        public final static Property Relay = new Property(10, int.class, "relay", false, "RELAY");
        public final static Property Status = new Property(11, int.class, "status", false, "STATUS");
        public final static Property ChkId = new Property(12, long.class, "chkId", false, "CHK_ID");
    }

    private Query<ChkDetonatorEntity> chkControllerEntity_ChkDetonatorListQuery;

    public ChkDetonatorEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChkDetonatorEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHK_DETONATOR_ENTITY\" (" + //
                "\"VALID_TIME\" INTEGER," + // 0: validTime
                "\"NUM\" INTEGER NOT NULL ," + // 1: num
                "\"CHIP_ID\" TEXT," + // 2: chipID
                "\"DET_IDS\" TEXT," + // 3: detIDs
                "\"SOURCE\" TEXT," + // 4: source
                "\"EXT_ID\" TEXT," + // 5: extId
                "\"TYPE\" INTEGER NOT NULL ," + // 6: type
                "\"UID\" TEXT," + // 7: uid
                "\"CODE\" TEXT," + // 8: code
                "\"WORK_CODE\" TEXT," + // 9: workCode
                "\"RELAY\" INTEGER NOT NULL ," + // 10: relay
                "\"STATUS\" INTEGER NOT NULL ," + // 11: status
                "\"CHK_ID\" INTEGER NOT NULL );"); // 12: chkId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHK_DETONATOR_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChkDetonatorEntity entity) {
        stmt.clearBindings();
 
        java.util.Date validTime = entity.getValidTime();
        if (validTime != null) {
            stmt.bindLong(1, validTime.getTime());
        }
        stmt.bindLong(2, entity.getNum());
 
        String chipID = entity.getChipID();
        if (chipID != null) {
            stmt.bindString(3, chipID);
        }
 
        String detIDs = entity.getDetIDs();
        if (detIDs != null) {
            stmt.bindString(4, detIDs);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(5, source);
        }
 
        String extId = entity.getExtId();
        if (extId != null) {
            stmt.bindString(6, extId);
        }
        stmt.bindLong(7, entity.getType());
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(8, uid);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(9, code);
        }
 
        String workCode = entity.getWorkCode();
        if (workCode != null) {
            stmt.bindString(10, workCode);
        }
        stmt.bindLong(11, entity.getRelay());
        stmt.bindLong(12, entity.getStatus());
        stmt.bindLong(13, entity.getChkId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChkDetonatorEntity entity) {
        stmt.clearBindings();
 
        java.util.Date validTime = entity.getValidTime();
        if (validTime != null) {
            stmt.bindLong(1, validTime.getTime());
        }
        stmt.bindLong(2, entity.getNum());
 
        String chipID = entity.getChipID();
        if (chipID != null) {
            stmt.bindString(3, chipID);
        }
 
        String detIDs = entity.getDetIDs();
        if (detIDs != null) {
            stmt.bindString(4, detIDs);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(5, source);
        }
 
        String extId = entity.getExtId();
        if (extId != null) {
            stmt.bindString(6, extId);
        }
        stmt.bindLong(7, entity.getType());
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(8, uid);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(9, code);
        }
 
        String workCode = entity.getWorkCode();
        if (workCode != null) {
            stmt.bindString(10, workCode);
        }
        stmt.bindLong(11, entity.getRelay());
        stmt.bindLong(12, entity.getStatus());
        stmt.bindLong(13, entity.getChkId());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ChkDetonatorEntity readEntity(Cursor cursor, int offset) {
        ChkDetonatorEntity entity = new ChkDetonatorEntity( //
            cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)), // validTime
            cursor.getInt(offset + 1), // num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chipID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // detIDs
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // source
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // extId
            cursor.getInt(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // uid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // code
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // workCode
            cursor.getInt(offset + 10), // relay
            cursor.getInt(offset + 11), // status
            cursor.getLong(offset + 12) // chkId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChkDetonatorEntity entity, int offset) {
        entity.setValidTime(cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)));
        entity.setNum(cursor.getInt(offset + 1));
        entity.setChipID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDetIDs(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSource(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExtId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
        entity.setUid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWorkCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRelay(cursor.getInt(offset + 10));
        entity.setStatus(cursor.getInt(offset + 11));
        entity.setChkId(cursor.getLong(offset + 12));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ChkDetonatorEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ChkDetonatorEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(ChkDetonatorEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "chkDetonatorList" to-many relationship of ChkControllerEntity. */
    public List<ChkDetonatorEntity> _queryChkControllerEntity_ChkDetonatorList(long chkId) {
        synchronized (this) {
            if (chkControllerEntity_ChkDetonatorListQuery == null) {
                QueryBuilder<ChkDetonatorEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChkId.eq(null));
                chkControllerEntity_ChkDetonatorListQuery = queryBuilder.build();
            }
        }
        Query<ChkDetonatorEntity> query = chkControllerEntity_ChkDetonatorListQuery.forCurrentThread();
        query.setParameter(0, chkId);
        return query.list();
    }

}
