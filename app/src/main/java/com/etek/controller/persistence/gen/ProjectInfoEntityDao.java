package com.etek.controller.persistence.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.etek.controller.persistence.entity.ProjectInfoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECT_INFO_ENTITY".
*/
public class ProjectInfoEntityDao extends AbstractDao<ProjectInfoEntity, Long> {

    public static final String TABLENAME = "PROJECT_INFO_ENTITY";

    /**
     * Properties of entity ProjectInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProCode = new Property(1, String.class, "proCode", false, "PRO_CODE");
        public final static Property ProName = new Property(2, String.class, "proName", false, "PRO_NAME");
        public final static Property CompanyCode = new Property(3, String.class, "companyCode", false, "COMPANY_CODE");
        public final static Property CompanyName = new Property(4, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property ContractCode = new Property(5, String.class, "contractCode", false, "CONTRACT_CODE");
        public final static Property ContractName = new Property(6, String.class, "contractName", false, "CONTRACT_NAME");
        public final static Property FileSn = new Property(7, String.class, "fileSn", false, "FILE_SN");
        public final static Property CreateTime = new Property(8, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ApplyDate = new Property(9, java.util.Date.class, "applyDate", false, "APPLY_DATE");
        public final static Property Status = new Property(10, int.class, "status", false, "STATUS");
        public final static Property IsOnline = new Property(11, Boolean.class, "isOnline", false, "IS_ONLINE");
        public final static Property ProjectImplementStates = new Property(12, String.class, "projectImplementStates", false, "PROJECT_IMPLEMENT_STATES");
        public final static Property Longitude = new Property(13, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(14, double.class, "latitude", false, "LATITUDE");
        public final static Property ReportStatus = new Property(15, String.class, "reportStatus", false, "REPORT_STATUS");
        public final static Property ControllerId = new Property(16, String.class, "controllerId", false, "CONTROLLER_ID");
        public final static Property BlastTime = new Property(17, java.util.Date.class, "blastTime", false, "BLAST_TIME");
    }

    private DaoSession daoSession;


    public ProjectInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECT_INFO_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRO_CODE\" TEXT," + // 1: proCode
                "\"PRO_NAME\" TEXT," + // 2: proName
                "\"COMPANY_CODE\" TEXT," + // 3: companyCode
                "\"COMPANY_NAME\" TEXT," + // 4: companyName
                "\"CONTRACT_CODE\" TEXT," + // 5: contractCode
                "\"CONTRACT_NAME\" TEXT," + // 6: contractName
                "\"FILE_SN\" TEXT," + // 7: fileSn
                "\"CREATE_TIME\" INTEGER," + // 8: createTime
                "\"APPLY_DATE\" INTEGER," + // 9: applyDate
                "\"STATUS\" INTEGER NOT NULL ," + // 10: status
                "\"IS_ONLINE\" INTEGER," + // 11: isOnline
                "\"PROJECT_IMPLEMENT_STATES\" TEXT," + // 12: projectImplementStates
                "\"LONGITUDE\" REAL NOT NULL ," + // 13: longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 14: latitude
                "\"REPORT_STATUS\" TEXT," + // 15: reportStatus
                "\"CONTROLLER_ID\" TEXT," + // 16: controllerId
                "\"BLAST_TIME\" INTEGER);"); // 17: blastTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECT_INFO_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProjectInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String proCode = entity.getProCode();
        if (proCode != null) {
            stmt.bindString(2, proCode);
        }
 
        String proName = entity.getProName();
        if (proName != null) {
            stmt.bindString(3, proName);
        }
 
        String companyCode = entity.getCompanyCode();
        if (companyCode != null) {
            stmt.bindString(4, companyCode);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(5, companyName);
        }
 
        String contractCode = entity.getContractCode();
        if (contractCode != null) {
            stmt.bindString(6, contractCode);
        }
 
        String contractName = entity.getContractName();
        if (contractName != null) {
            stmt.bindString(7, contractName);
        }
 
        String fileSn = entity.getFileSn();
        if (fileSn != null) {
            stmt.bindString(8, fileSn);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(9, createTime.getTime());
        }
 
        java.util.Date applyDate = entity.getApplyDate();
        if (applyDate != null) {
            stmt.bindLong(10, applyDate.getTime());
        }
        stmt.bindLong(11, entity.getStatus());
 
        Boolean isOnline = entity.getIsOnline();
        if (isOnline != null) {
            stmt.bindLong(12, isOnline ? 1L: 0L);
        }
 
        String projectImplementStates = entity.getProjectImplementStates();
        if (projectImplementStates != null) {
            stmt.bindString(13, projectImplementStates);
        }
        stmt.bindDouble(14, entity.getLongitude());
        stmt.bindDouble(15, entity.getLatitude());
 
        String reportStatus = entity.getReportStatus();
        if (reportStatus != null) {
            stmt.bindString(16, reportStatus);
        }
 
        String controllerId = entity.getControllerId();
        if (controllerId != null) {
            stmt.bindString(17, controllerId);
        }
 
        java.util.Date blastTime = entity.getBlastTime();
        if (blastTime != null) {
            stmt.bindLong(18, blastTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProjectInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String proCode = entity.getProCode();
        if (proCode != null) {
            stmt.bindString(2, proCode);
        }
 
        String proName = entity.getProName();
        if (proName != null) {
            stmt.bindString(3, proName);
        }
 
        String companyCode = entity.getCompanyCode();
        if (companyCode != null) {
            stmt.bindString(4, companyCode);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(5, companyName);
        }
 
        String contractCode = entity.getContractCode();
        if (contractCode != null) {
            stmt.bindString(6, contractCode);
        }
 
        String contractName = entity.getContractName();
        if (contractName != null) {
            stmt.bindString(7, contractName);
        }
 
        String fileSn = entity.getFileSn();
        if (fileSn != null) {
            stmt.bindString(8, fileSn);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(9, createTime.getTime());
        }
 
        java.util.Date applyDate = entity.getApplyDate();
        if (applyDate != null) {
            stmt.bindLong(10, applyDate.getTime());
        }
        stmt.bindLong(11, entity.getStatus());
 
        Boolean isOnline = entity.getIsOnline();
        if (isOnline != null) {
            stmt.bindLong(12, isOnline ? 1L: 0L);
        }
 
        String projectImplementStates = entity.getProjectImplementStates();
        if (projectImplementStates != null) {
            stmt.bindString(13, projectImplementStates);
        }
        stmt.bindDouble(14, entity.getLongitude());
        stmt.bindDouble(15, entity.getLatitude());
 
        String reportStatus = entity.getReportStatus();
        if (reportStatus != null) {
            stmt.bindString(16, reportStatus);
        }
 
        String controllerId = entity.getControllerId();
        if (controllerId != null) {
            stmt.bindString(17, controllerId);
        }
 
        java.util.Date blastTime = entity.getBlastTime();
        if (blastTime != null) {
            stmt.bindLong(18, blastTime.getTime());
        }
    }

    @Override
    protected final void attachEntity(ProjectInfoEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProjectInfoEntity readEntity(Cursor cursor, int offset) {
        ProjectInfoEntity entity = new ProjectInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // proCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // proName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // companyCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // companyName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contractCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contractName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fileSn
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // createTime
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // applyDate
            cursor.getInt(offset + 10), // status
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // isOnline
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // projectImplementStates
            cursor.getDouble(offset + 13), // longitude
            cursor.getDouble(offset + 14), // latitude
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // reportStatus
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // controllerId
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)) // blastTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProjectInfoEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompanyCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompanyName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContractCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContractName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFileSn(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreateTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setApplyDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setStatus(cursor.getInt(offset + 10));
        entity.setIsOnline(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setProjectImplementStates(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLongitude(cursor.getDouble(offset + 13));
        entity.setLatitude(cursor.getDouble(offset + 14));
        entity.setReportStatus(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setControllerId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBlastTime(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProjectInfoEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProjectInfoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProjectInfoEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
