package com.etek.controller.persistence.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.etek.controller.yunnan.enetity.YunnanAuthBobmEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "YUNNAN_AUTH_BOBM_ENTITY".
*/
public class YunnanAuthBobmEntityDao extends AbstractDao<YunnanAuthBobmEntity, Long> {

    public static final String TABLENAME = "YUNNAN_AUTH_BOBM_ENTITY";

    /**
     * Properties of entity YunnanAuthBobmEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Mc = new Property(1, String.class, "mc", false, "MC");
        public final static Property FileId = new Property(2, String.class, "FileId", false, "FILE_ID");
        public final static Property Bpcs = new Property(3, int.class, "bpcs", false, "BPCS");
        public final static Property Kssj = new Property(4, String.class, "kssj", false, "KSSJ");
        public final static Property Jssj = new Property(5, String.class, "jssj", false, "JSSJ");
        public final static Property Zbbj = new Property(6, int.class, "zbbj", false, "ZBBJ");
        public final static Property QbqStr = new Property(7, String.class, "qbqStr", false, "QBQ_STR");
        public final static Property ZbqyStr = new Property(8, String.class, "zbqyStr", false, "ZBQY_STR");
        public final static Property LgmStr = new Property(9, String.class, "lgmStr", false, "LGM_STR");
        public final static Property Date = new Property(10, Long.class, "date", false, "DATE");
        public final static Property QbqCount = new Property(11, int.class, "qbqCount", false, "QBQ_COUNT");
        public final static Property ZbqyCount = new Property(12, int.class, "zbqyCount", false, "ZBQY_COUNT");
        public final static Property LgmCount = new Property(13, int.class, "lgmCount", false, "LGM_COUNT");
    }


    public YunnanAuthBobmEntityDao(DaoConfig config) {
        super(config);
    }
    
    public YunnanAuthBobmEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"YUNNAN_AUTH_BOBM_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MC\" TEXT," + // 1: mc
                "\"FILE_ID\" TEXT," + // 2: FileId
                "\"BPCS\" INTEGER NOT NULL ," + // 3: bpcs
                "\"KSSJ\" TEXT," + // 4: kssj
                "\"JSSJ\" TEXT," + // 5: jssj
                "\"ZBBJ\" INTEGER NOT NULL ," + // 6: zbbj
                "\"QBQ_STR\" TEXT," + // 7: qbqStr
                "\"ZBQY_STR\" TEXT," + // 8: zbqyStr
                "\"LGM_STR\" TEXT," + // 9: lgmStr
                "\"DATE\" INTEGER," + // 10: date
                "\"QBQ_COUNT\" INTEGER NOT NULL ," + // 11: qbqCount
                "\"ZBQY_COUNT\" INTEGER NOT NULL ," + // 12: zbqyCount
                "\"LGM_COUNT\" INTEGER NOT NULL );"); // 13: lgmCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"YUNNAN_AUTH_BOBM_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, YunnanAuthBobmEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mc = entity.getMc();
        if (mc != null) {
            stmt.bindString(2, mc);
        }
 
        String FileId = entity.getFileId();
        if (FileId != null) {
            stmt.bindString(3, FileId);
        }
        stmt.bindLong(4, entity.getBpcs());
 
        String kssj = entity.getKssj();
        if (kssj != null) {
            stmt.bindString(5, kssj);
        }
 
        String jssj = entity.getJssj();
        if (jssj != null) {
            stmt.bindString(6, jssj);
        }
        stmt.bindLong(7, entity.getZbbj());
 
        String qbqStr = entity.getQbqStr();
        if (qbqStr != null) {
            stmt.bindString(8, qbqStr);
        }
 
        String zbqyStr = entity.getZbqyStr();
        if (zbqyStr != null) {
            stmt.bindString(9, zbqyStr);
        }
 
        String lgmStr = entity.getLgmStr();
        if (lgmStr != null) {
            stmt.bindString(10, lgmStr);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(11, date);
        }
        stmt.bindLong(12, entity.getQbqCount());
        stmt.bindLong(13, entity.getZbqyCount());
        stmt.bindLong(14, entity.getLgmCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, YunnanAuthBobmEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mc = entity.getMc();
        if (mc != null) {
            stmt.bindString(2, mc);
        }
 
        String FileId = entity.getFileId();
        if (FileId != null) {
            stmt.bindString(3, FileId);
        }
        stmt.bindLong(4, entity.getBpcs());
 
        String kssj = entity.getKssj();
        if (kssj != null) {
            stmt.bindString(5, kssj);
        }
 
        String jssj = entity.getJssj();
        if (jssj != null) {
            stmt.bindString(6, jssj);
        }
        stmt.bindLong(7, entity.getZbbj());
 
        String qbqStr = entity.getQbqStr();
        if (qbqStr != null) {
            stmt.bindString(8, qbqStr);
        }
 
        String zbqyStr = entity.getZbqyStr();
        if (zbqyStr != null) {
            stmt.bindString(9, zbqyStr);
        }
 
        String lgmStr = entity.getLgmStr();
        if (lgmStr != null) {
            stmt.bindString(10, lgmStr);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(11, date);
        }
        stmt.bindLong(12, entity.getQbqCount());
        stmt.bindLong(13, entity.getZbqyCount());
        stmt.bindLong(14, entity.getLgmCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public YunnanAuthBobmEntity readEntity(Cursor cursor, int offset) {
        YunnanAuthBobmEntity entity = new YunnanAuthBobmEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FileId
            cursor.getInt(offset + 3), // bpcs
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // kssj
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // jssj
            cursor.getInt(offset + 6), // zbbj
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // qbqStr
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // zbqyStr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lgmStr
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // date
            cursor.getInt(offset + 11), // qbqCount
            cursor.getInt(offset + 12), // zbqyCount
            cursor.getInt(offset + 13) // lgmCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, YunnanAuthBobmEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFileId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBpcs(cursor.getInt(offset + 3));
        entity.setKssj(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setJssj(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setZbbj(cursor.getInt(offset + 6));
        entity.setQbqStr(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZbqyStr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLgmStr(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDate(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setQbqCount(cursor.getInt(offset + 11));
        entity.setZbqyCount(cursor.getInt(offset + 12));
        entity.setLgmCount(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(YunnanAuthBobmEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(YunnanAuthBobmEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(YunnanAuthBobmEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
