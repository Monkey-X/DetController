package com.etek.controller.persistence.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.etek.controller.persistence.entity.ControllerEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTROLLER_ENTITY".
*/
public class ControllerEntityDao extends AbstractDao<ControllerEntity, Void> {

    public static final String TABLENAME = "CONTROLLER_ENTITY";

    /**
     * Properties of entity ControllerEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property ProjectInfoId = new Property(1, long.class, "projectInfoId", false, "PROJECT_INFO_ID");
    }

    private Query<ControllerEntity> projectInfoEntity_ControllerListQuery;

    public ControllerEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ControllerEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTROLLER_ENTITY\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"PROJECT_INFO_ID\" INTEGER NOT NULL );"); // 1: projectInfoId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTROLLER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ControllerEntity entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindLong(2, entity.getProjectInfoId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ControllerEntity entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindLong(2, entity.getProjectInfoId());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ControllerEntity readEntity(Cursor cursor, int offset) {
        ControllerEntity entity = new ControllerEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.getLong(offset + 1) // projectInfoId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ControllerEntity entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setProjectInfoId(cursor.getLong(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ControllerEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ControllerEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(ControllerEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "controllerList" to-many relationship of ProjectInfoEntity. */
    public List<ControllerEntity> _queryProjectInfoEntity_ControllerList(long projectInfoId) {
        synchronized (this) {
            if (projectInfoEntity_ControllerListQuery == null) {
                QueryBuilder<ControllerEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProjectInfoId.eq(null));
                projectInfoEntity_ControllerListQuery = queryBuilder.build();
            }
        }
        Query<ControllerEntity> query = projectInfoEntity_ControllerListQuery.forCurrentThread();
        query.setParameter(0, projectInfoId);
        return query.list();
    }

}
