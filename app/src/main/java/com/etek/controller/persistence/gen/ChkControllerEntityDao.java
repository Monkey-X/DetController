package com.etek.controller.persistence.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.etek.controller.persistence.entity.ProjectInfoEntity;

import com.etek.controller.persistence.entity.ChkControllerEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHK_CONTROLLER_ENTITY".
*/
public class ChkControllerEntityDao extends AbstractDao<ChkControllerEntity, Long> {

    public static final String TABLENAME = "CHK_CONTROLLER_ENTITY";

    /**
     * Properties of entity ChkControllerEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProjectInfoId = new Property(1, long.class, "projectInfoId", false, "PROJECT_INFO_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Company = new Property(3, String.class, "company", false, "COMPANY");
        public final static Property Sn = new Property(4, String.class, "sn", false, "SN");
        public final static Property DetCount = new Property(5, int.class, "detCount", false, "DET_COUNT");
        public final static Property ContractId = new Property(6, String.class, "contractId", false, "CONTRACT_ID");
        public final static Property Latitude = new Property(7, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(8, double.class, "longitude", false, "LONGITUDE");
        public final static Property BlastTime = new Property(9, java.util.Date.class, "blastTime", false, "BLAST_TIME");
        public final static Property Type = new Property(10, int.class, "type", false, "TYPE");
        public final static Property ProjectId = new Property(11, String.class, "projectId", false, "PROJECT_ID");
        public final static Property Status = new Property(12, int.class, "status", false, "STATUS");
        public final static Property UserIDCode = new Property(13, String.class, "userIDCode", false, "USER_IDCODE");
        public final static Property Token = new Property(14, String.class, "token", false, "TOKEN");
        public final static Property IsValid = new Property(15, boolean.class, "isValid", false, "IS_VALID");
        public final static Property IsOnline = new Property(16, Integer.class, "isOnline", false, "IS_ONLINE");
    }

    private DaoSession daoSession;


    public ChkControllerEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChkControllerEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHK_CONTROLLER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROJECT_INFO_ID\" INTEGER NOT NULL ," + // 1: projectInfoId
                "\"NAME\" TEXT," + // 2: name
                "\"COMPANY\" TEXT," + // 3: company
                "\"SN\" TEXT," + // 4: sn
                "\"DET_COUNT\" INTEGER NOT NULL ," + // 5: detCount
                "\"CONTRACT_ID\" TEXT," + // 6: contractId
                "\"LATITUDE\" REAL NOT NULL ," + // 7: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 8: longitude
                "\"BLAST_TIME\" INTEGER," + // 9: blastTime
                "\"TYPE\" INTEGER NOT NULL ," + // 10: type
                "\"PROJECT_ID\" TEXT," + // 11: projectId
                "\"STATUS\" INTEGER NOT NULL ," + // 12: status
                "\"USER_IDCODE\" TEXT," + // 13: userIDCode
                "\"TOKEN\" TEXT," + // 14: token
                "\"IS_VALID\" INTEGER NOT NULL ," + // 15: isValid
                "\"IS_ONLINE\" INTEGER);"); // 16: isOnline
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHK_CONTROLLER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChkControllerEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProjectInfoId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(4, company);
        }
 
        String sn = entity.getSn();
        if (sn != null) {
            stmt.bindString(5, sn);
        }
        stmt.bindLong(6, entity.getDetCount());
 
        String contractId = entity.getContractId();
        if (contractId != null) {
            stmt.bindString(7, contractId);
        }
        stmt.bindDouble(8, entity.getLatitude());
        stmt.bindDouble(9, entity.getLongitude());
 
        java.util.Date blastTime = entity.getBlastTime();
        if (blastTime != null) {
            stmt.bindLong(10, blastTime.getTime());
        }
        stmt.bindLong(11, entity.getType());
 
        String projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindString(12, projectId);
        }
        stmt.bindLong(13, entity.getStatus());
 
        String userIDCode = entity.getUserIDCode();
        if (userIDCode != null) {
            stmt.bindString(14, userIDCode);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(15, token);
        }
        stmt.bindLong(16, entity.getIsValid() ? 1L: 0L);
 
        Integer isOnline = entity.getIsOnline();
        if (isOnline != null) {
            stmt.bindLong(17, isOnline);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChkControllerEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProjectInfoId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(4, company);
        }
 
        String sn = entity.getSn();
        if (sn != null) {
            stmt.bindString(5, sn);
        }
        stmt.bindLong(6, entity.getDetCount());
 
        String contractId = entity.getContractId();
        if (contractId != null) {
            stmt.bindString(7, contractId);
        }
        stmt.bindDouble(8, entity.getLatitude());
        stmt.bindDouble(9, entity.getLongitude());
 
        java.util.Date blastTime = entity.getBlastTime();
        if (blastTime != null) {
            stmt.bindLong(10, blastTime.getTime());
        }
        stmt.bindLong(11, entity.getType());
 
        String projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindString(12, projectId);
        }
        stmt.bindLong(13, entity.getStatus());
 
        String userIDCode = entity.getUserIDCode();
        if (userIDCode != null) {
            stmt.bindString(14, userIDCode);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(15, token);
        }
        stmt.bindLong(16, entity.getIsValid() ? 1L: 0L);
 
        Integer isOnline = entity.getIsOnline();
        if (isOnline != null) {
            stmt.bindLong(17, isOnline);
        }
    }

    @Override
    protected final void attachEntity(ChkControllerEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChkControllerEntity readEntity(Cursor cursor, int offset) {
        ChkControllerEntity entity = new ChkControllerEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // projectInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // company
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sn
            cursor.getInt(offset + 5), // detCount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contractId
            cursor.getDouble(offset + 7), // latitude
            cursor.getDouble(offset + 8), // longitude
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // blastTime
            cursor.getInt(offset + 10), // type
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // projectId
            cursor.getInt(offset + 12), // status
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // userIDCode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // token
            cursor.getShort(offset + 15) != 0, // isValid
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16) // isOnline
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChkControllerEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProjectInfoId(cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompany(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSn(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDetCount(cursor.getInt(offset + 5));
        entity.setContractId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLatitude(cursor.getDouble(offset + 7));
        entity.setLongitude(cursor.getDouble(offset + 8));
        entity.setBlastTime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setType(cursor.getInt(offset + 10));
        entity.setProjectId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStatus(cursor.getInt(offset + 12));
        entity.setUserIDCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setToken(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIsValid(cursor.getShort(offset + 15) != 0);
        entity.setIsOnline(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChkControllerEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChkControllerEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChkControllerEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProjectInfoEntityDao().getAllColumns());
            builder.append(" FROM CHK_CONTROLLER_ENTITY T");
            builder.append(" LEFT JOIN PROJECT_INFO_ENTITY T0 ON T.\"PROJECT_INFO_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ChkControllerEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        ChkControllerEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ProjectInfoEntity projectInfoEntity = loadCurrentOther(daoSession.getProjectInfoEntityDao(), cursor, offset);
         if(projectInfoEntity != null) {
            entity.setProjectInfoEntity(projectInfoEntity);
        }

        return entity;    
    }

    public ChkControllerEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ChkControllerEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ChkControllerEntity> list = new ArrayList<ChkControllerEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ChkControllerEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ChkControllerEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
