package com.etek.controller.persistence.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.etek.controller.persistence.entity.ReportEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REPORT_ENTITY".
*/
public class ReportEntityDao extends AbstractDao<ReportEntity, Long> {

    public static final String TABLENAME = "REPORT_ENTITY";

    /**
     * Properties of entity ReportEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ControllerId = new Property(1, String.class, "controllerId", false, "CONTROLLER_ID");
        public final static Property Longitude = new Property(2, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(3, double.class, "latitude", false, "LATITUDE");
        public final static Property BlastTime = new Property(4, java.util.Date.class, "blastTime", false, "BLAST_TIME");
        public final static Property IdCode = new Property(5, String.class, "idCode", false, "ID_CODE");
        public final static Property ContractId = new Property(6, String.class, "contractId", false, "CONTRACT_ID");
        public final static Property ProjectId = new Property(7, String.class, "projectId", false, "PROJECT_ID");
        public final static Property Status = new Property(8, int.class, "status", false, "STATUS");
        public final static Property Token = new Property(9, String.class, "token", false, "TOKEN");
        public final static Property CompanyCode = new Property(10, String.class, "companyCode", false, "COMPANY_CODE");
    }

    private DaoSession daoSession;


    public ReportEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ReportEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REPORT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CONTROLLER_ID\" TEXT," + // 1: controllerId
                "\"LONGITUDE\" REAL NOT NULL ," + // 2: longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 3: latitude
                "\"BLAST_TIME\" INTEGER," + // 4: blastTime
                "\"ID_CODE\" TEXT," + // 5: idCode
                "\"CONTRACT_ID\" TEXT," + // 6: contractId
                "\"PROJECT_ID\" TEXT," + // 7: projectId
                "\"STATUS\" INTEGER NOT NULL ," + // 8: status
                "\"TOKEN\" TEXT," + // 9: token
                "\"COMPANY_CODE\" TEXT);"); // 10: companyCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REPORT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReportEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String controllerId = entity.getControllerId();
        if (controllerId != null) {
            stmt.bindString(2, controllerId);
        }
        stmt.bindDouble(3, entity.getLongitude());
        stmt.bindDouble(4, entity.getLatitude());
 
        java.util.Date blastTime = entity.getBlastTime();
        if (blastTime != null) {
            stmt.bindLong(5, blastTime.getTime());
        }
 
        String idCode = entity.getIdCode();
        if (idCode != null) {
            stmt.bindString(6, idCode);
        }
 
        String contractId = entity.getContractId();
        if (contractId != null) {
            stmt.bindString(7, contractId);
        }
 
        String projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindString(8, projectId);
        }
        stmt.bindLong(9, entity.getStatus());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(10, token);
        }
 
        String companyCode = entity.getCompanyCode();
        if (companyCode != null) {
            stmt.bindString(11, companyCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReportEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String controllerId = entity.getControllerId();
        if (controllerId != null) {
            stmt.bindString(2, controllerId);
        }
        stmt.bindDouble(3, entity.getLongitude());
        stmt.bindDouble(4, entity.getLatitude());
 
        java.util.Date blastTime = entity.getBlastTime();
        if (blastTime != null) {
            stmt.bindLong(5, blastTime.getTime());
        }
 
        String idCode = entity.getIdCode();
        if (idCode != null) {
            stmt.bindString(6, idCode);
        }
 
        String contractId = entity.getContractId();
        if (contractId != null) {
            stmt.bindString(7, contractId);
        }
 
        String projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindString(8, projectId);
        }
        stmt.bindLong(9, entity.getStatus());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(10, token);
        }
 
        String companyCode = entity.getCompanyCode();
        if (companyCode != null) {
            stmt.bindString(11, companyCode);
        }
    }

    @Override
    protected final void attachEntity(ReportEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReportEntity readEntity(Cursor cursor, int offset) {
        ReportEntity entity = new ReportEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // controllerId
            cursor.getDouble(offset + 2), // longitude
            cursor.getDouble(offset + 3), // latitude
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // blastTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // idCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contractId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // projectId
            cursor.getInt(offset + 8), // status
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // token
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // companyCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReportEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setControllerId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLongitude(cursor.getDouble(offset + 2));
        entity.setLatitude(cursor.getDouble(offset + 3));
        entity.setBlastTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setIdCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContractId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProjectId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStatus(cursor.getInt(offset + 8));
        entity.setToken(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCompanyCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReportEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReportEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReportEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
