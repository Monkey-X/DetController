package com.etek.controller.persistence.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.etek.controller.persistence.entity.DetonatorEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DETONATOR_ENTITY".
*/
public class DetonatorEntityDao extends AbstractDao<DetonatorEntity, Void> {

    public static final String TABLENAME = "DETONATOR_ENTITY";

    /**
     * Properties of entity DetonatorEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ValidTime = new Property(0, java.util.Date.class, "validTime", false, "VALID_TIME");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property Code = new Property(2, String.class, "code", false, "CODE");
        public final static Property WorkCode = new Property(3, String.class, "workCode", false, "WORK_CODE");
        public final static Property Relay = new Property(4, String.class, "relay", false, "RELAY");
        public final static Property Status = new Property(5, int.class, "status", false, "STATUS");
        public final static Property ProjectInfoId = new Property(6, long.class, "projectInfoId", false, "PROJECT_INFO_ID");
    }

    private Query<DetonatorEntity> projectInfoEntity_DetonatorListQuery;

    public DetonatorEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DetonatorEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DETONATOR_ENTITY\" (" + //
                "\"VALID_TIME\" INTEGER," + // 0: validTime
                "\"UID\" TEXT," + // 1: uid
                "\"CODE\" TEXT," + // 2: code
                "\"WORK_CODE\" TEXT," + // 3: workCode
                "\"RELAY\" TEXT," + // 4: relay
                "\"STATUS\" INTEGER NOT NULL ," + // 5: status
                "\"PROJECT_INFO_ID\" INTEGER NOT NULL );"); // 6: projectInfoId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DETONATOR_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DetonatorEntity entity) {
        stmt.clearBindings();
 
        java.util.Date validTime = entity.getValidTime();
        if (validTime != null) {
            stmt.bindLong(1, validTime.getTime());
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String workCode = entity.getWorkCode();
        if (workCode != null) {
            stmt.bindString(4, workCode);
        }
 
        String relay = entity.getRelay();
        if (relay != null) {
            stmt.bindString(5, relay);
        }
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getProjectInfoId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DetonatorEntity entity) {
        stmt.clearBindings();
 
        java.util.Date validTime = entity.getValidTime();
        if (validTime != null) {
            stmt.bindLong(1, validTime.getTime());
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String workCode = entity.getWorkCode();
        if (workCode != null) {
            stmt.bindString(4, workCode);
        }
 
        String relay = entity.getRelay();
        if (relay != null) {
            stmt.bindString(5, relay);
        }
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getProjectInfoId());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public DetonatorEntity readEntity(Cursor cursor, int offset) {
        DetonatorEntity entity = new DetonatorEntity( //
            cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)), // validTime
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // workCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // relay
            cursor.getInt(offset + 5), // status
            cursor.getLong(offset + 6) // projectInfoId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DetonatorEntity entity, int offset) {
        entity.setValidTime(cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWorkCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRelay(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.getInt(offset + 5));
        entity.setProjectInfoId(cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(DetonatorEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(DetonatorEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(DetonatorEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "detonatorList" to-many relationship of ProjectInfoEntity. */
    public List<DetonatorEntity> _queryProjectInfoEntity_DetonatorList(long projectInfoId) {
        synchronized (this) {
            if (projectInfoEntity_DetonatorListQuery == null) {
                QueryBuilder<DetonatorEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProjectInfoId.eq(null));
                projectInfoEntity_DetonatorListQuery = queryBuilder.build();
            }
        }
        Query<DetonatorEntity> query = projectInfoEntity_DetonatorListQuery.forCurrentThread();
        query.setParameter(0, projectInfoId);
        return query.list();
    }

}
