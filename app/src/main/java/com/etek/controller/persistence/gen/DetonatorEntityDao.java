package com.etek.controller.persistence.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.etek.controller.persistence.entity.DetonatorEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DETONATOR_ENTITY".
*/
public class DetonatorEntityDao extends AbstractDao<DetonatorEntity, Long> {

    public static final String TABLENAME = "DETONATOR_ENTITY";

    /**
     * Properties of entity DetonatorEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ValidTime = new Property(1, java.util.Date.class, "validTime", false, "VALID_TIME");
        public final static Property Uid = new Property(2, String.class, "uid", false, "UID");
        public final static Property Code = new Property(3, String.class, "code", false, "CODE");
        public final static Property WorkCode = new Property(4, String.class, "workCode", false, "WORK_CODE");
        public final static Property Relay = new Property(5, String.class, "relay", false, "RELAY");
        public final static Property Status = new Property(6, int.class, "status", false, "STATUS");
        public final static Property HolePosition = new Property(7, String.class, "holePosition", false, "HOLE_POSITION");
        public final static Property DownLoadStatus = new Property(8, int.class, "downLoadStatus", false, "DOWN_LOAD_STATUS");
        public final static Property TestStatus = new Property(9, int.class, "testStatus", false, "TEST_STATUS");
        public final static Property ProjectInfoId = new Property(10, long.class, "projectInfoId", false, "PROJECT_INFO_ID");
    }

    private Query<DetonatorEntity> projectInfoEntity_DetonatorListQuery;

    public DetonatorEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DetonatorEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DETONATOR_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"VALID_TIME\" INTEGER," + // 1: validTime
                "\"UID\" TEXT," + // 2: uid
                "\"CODE\" TEXT," + // 3: code
                "\"WORK_CODE\" TEXT," + // 4: workCode
                "\"RELAY\" TEXT," + // 5: relay
                "\"STATUS\" INTEGER NOT NULL ," + // 6: status
                "\"HOLE_POSITION\" TEXT," + // 7: holePosition
                "\"DOWN_LOAD_STATUS\" INTEGER NOT NULL ," + // 8: downLoadStatus
                "\"TEST_STATUS\" INTEGER NOT NULL ," + // 9: testStatus
                "\"PROJECT_INFO_ID\" INTEGER NOT NULL );"); // 10: projectInfoId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DETONATOR_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DetonatorEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date validTime = entity.getValidTime();
        if (validTime != null) {
            stmt.bindLong(2, validTime.getTime());
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        String workCode = entity.getWorkCode();
        if (workCode != null) {
            stmt.bindString(5, workCode);
        }
 
        String relay = entity.getRelay();
        if (relay != null) {
            stmt.bindString(6, relay);
        }
        stmt.bindLong(7, entity.getStatus());
 
        String holePosition = entity.getHolePosition();
        if (holePosition != null) {
            stmt.bindString(8, holePosition);
        }
        stmt.bindLong(9, entity.getDownLoadStatus());
        stmt.bindLong(10, entity.getTestStatus());
        stmt.bindLong(11, entity.getProjectInfoId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DetonatorEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date validTime = entity.getValidTime();
        if (validTime != null) {
            stmt.bindLong(2, validTime.getTime());
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        String workCode = entity.getWorkCode();
        if (workCode != null) {
            stmt.bindString(5, workCode);
        }
 
        String relay = entity.getRelay();
        if (relay != null) {
            stmt.bindString(6, relay);
        }
        stmt.bindLong(7, entity.getStatus());
 
        String holePosition = entity.getHolePosition();
        if (holePosition != null) {
            stmt.bindString(8, holePosition);
        }
        stmt.bindLong(9, entity.getDownLoadStatus());
        stmt.bindLong(10, entity.getTestStatus());
        stmt.bindLong(11, entity.getProjectInfoId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DetonatorEntity readEntity(Cursor cursor, int offset) {
        DetonatorEntity entity = new DetonatorEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // validTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // workCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // relay
            cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // holePosition
            cursor.getInt(offset + 8), // downLoadStatus
            cursor.getInt(offset + 9), // testStatus
            cursor.getLong(offset + 10) // projectInfoId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DetonatorEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setValidTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setUid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWorkCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRelay(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.getInt(offset + 6));
        entity.setHolePosition(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDownLoadStatus(cursor.getInt(offset + 8));
        entity.setTestStatus(cursor.getInt(offset + 9));
        entity.setProjectInfoId(cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DetonatorEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DetonatorEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DetonatorEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "detonatorList" to-many relationship of ProjectInfoEntity. */
    public List<DetonatorEntity> _queryProjectInfoEntity_DetonatorList(long projectInfoId) {
        synchronized (this) {
            if (projectInfoEntity_DetonatorListQuery == null) {
                QueryBuilder<DetonatorEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProjectInfoId.eq(null));
                projectInfoEntity_DetonatorListQuery = queryBuilder.build();
            }
        }
        Query<DetonatorEntity> query = projectInfoEntity_DetonatorListQuery.forCurrentThread();
        query.setParameter(0, projectInfoId);
        return query.list();
    }

}
